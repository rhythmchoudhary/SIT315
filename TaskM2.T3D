import threading
import time
import heapq
from datetime import datetime
from collections import defaultdict
import random

class BoundedBuffer:
    def __init__(self, capacity):
        self.capacity = capacity
        self.buffer = []
        self.lock = threading.Lock()
        self.not_full = threading.Condition(self.lock)
        self.not_empty = threading.Condition(self.lock)
    
    def put(self, item):
        with self.not_full:
            while len(self.buffer) >= self.capacity:
                self.not_full.wait()
            self.buffer.append(item)
            self.not_empty.notify()
    
    def get(self):
        with self.not_empty:
            while len(self.buffer) == 0:
                self.not_empty.wait()
            item = self.buffer.pop(0)
            self.not_full.notify()
            return item

class TrafficProducer(threading.Thread):
    def __init__(self, buffer, data_source, producer_id):
        super().__init__()
        self.buffer = buffer
        self.data_source = data_source
        self.producer_id = producer_id
        self.stop_event = threading.Event()
    
    def run(self):
        for data in self.data_source:
            if self.stop_event.is_set():
                break
            self.buffer.put(data)
            print(f"Producer {self.producer_id} added: {data}")
        print(f"Producer {self.producer_id} finished")

    def stop(self):
        self.stop_event.set()

class TrafficConsumer(threading.Thread):
    def __init__(self, buffer, traffic_stats, top_n, consumer_id):
        super().__init__()
        self.buffer = buffer
        self.traffic_stats = traffic_stats
        self.top_n = top_n
        self.consumer_id = consumer_id
        self.stop_event = threading.Event()
    
    def run(self):
        while not self.stop_event.is_set():
            try:
                data = self.buffer.get()
                if data == "STOP":
                    self.buffer.put("STOP")  # Re-insert for other consumers
                    break
                
                timestamp, light_id, cars = data
                with self.traffic_stats['lock']:
                    # Update total cars count
                    self.traffic_stats['counts'][light_id] += cars
                    
                    # Update top N list
                    counts = self.traffic_stats['counts']
                    top_items = heapq.nlargest(self.top_n, counts.items(), key=lambda x: x[1])
                    self.traffic_stats['top_n'] = top_items
                
                print(f"Consumer {self.consumer_id} processed: {data}")
                print(f"Current top {self.top_n}: {top_items}")
            except Exception as e:
                print(f"Consumer {self.consumer_id} error: {str(e)}")
        print(f"Consumer {self.consumer_id} finished")

    def stop(self):
        self.stop_event.set()

def generate_test_data(num_signals, num_entries):
    """Generate test data for simulation"""
    data = []
    for _ in range(num_entries):
        signal_id = random.randint(1, num_signals)
        cars = random.randint(0, 50)
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        data.append((timestamp, f"TL-{signal_id}", cars))
    return data

def main():
    # Configuration
    NUM_PRODUCERS = 3
    NUM_CONSUMERS = 2
    BUFFER_SIZE = 10
    TOP_N = 5
    NUM_TRAFFIC_SIGNALS = 10
    NUM_ENTRIES = 24  # Simulating 2 hours of data (12 measurements per hour)
    
    # Generate test data
    test_data = generate_test_data(NUM_TRAFFIC_SIGNALS, NUM_ENTRIES)
    
    # Split data among producers
    data_per_producer = len(test_data) // NUM_PRODUCERS
    producer_data = []
    for i in range(NUM_PRODUCERS):
        start = i * data_per_producer
        end = (i + 1) * data_per_producer if i < NUM_PRODUCERS - 1 else len(test_data)
        producer_data.append(test_data[start:end])
    
    # Shared objects
    buffer = BoundedBuffer(BUFFER_SIZE)
    traffic_stats = {
        'counts': defaultdict(int),
        'top_n': [],
        'lock': threading.Lock()
    }
    
    # Create and start producers
    producers = []
    for i in range(NUM_PRODUCERS):
        producer = TrafficProducer(buffer, producer_data[i], i+1)
        producers.append(producer)
        producer.start()
    
    # Create and start consumers
    consumers = []
    for i in range(NUM_CONSUMERS):
        consumer = TrafficConsumer(buffer, traffic_stats, TOP_N, i+1)
        consumers.append(consumer)
        consumer.start()
    
    # Wait for producers to finish
    for producer in producers:
        producer.join()
    
    # Signal consumers to stop
    for _ in range(NUM_CONSUMERS):
        buffer.put("STOP")
    
    # Wait for consumers to finish
    for consumer in consumers:
        consumer.join()
    
    # Final results
    print("\nFinal Traffic Statistics:")
    print(f"Total cars per traffic light: {dict(traffic_stats['counts'])}")
    print(f"Top {TOP_N} congested traffic lights: {traffic_stats['top_n']}")

if __name__ == "__main__":
    main()
