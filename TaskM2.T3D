import threading
import time
from queue import Queue
from collections import defaultdict
from datetime import datetime
import os

# Configuration
TOP_N = 3  # Top N most congested lights
BUFFER_SIZE = 10
NUM_PRODUCERS = 1
NUM_CONSUMERS = 2

data_queue = Queue(BUFFER_SIZE)
traffic_data_by_hour = defaultdict(lambda: defaultdict(int))
lock = threading.Lock()

# Helper to parse hour from timestamp
def get_hour(timestamp):
    return datetime.strptime(timestamp, "%H:%M").hour

# Producer Thread
def producer_thread(file_path, thread_id):
    with open(file_path, 'r') as file:
        for line in file:
            if not line.strip():
                continue
            data_queue.put(line.strip())
            print(f"Producer-{thread_id} enqueued: {line.strip()}")
            time.sleep(0.1)  # Simulate delay

    # Signal end of file to consumers
    for _ in range(NUM_CONSUMERS):
        data_queue.put(None)

# Consumer Thread
def consumer_thread(thread_id):
    while True:
        line = data_queue.get()
        if line is None:
            data_queue.task_done()
            break

        try:
            timestamp, light_id, cars = line.split()
            hour = get_hour(timestamp)

            with lock:
                traffic_data_by_hour[hour][light_id] += int(cars)
            print(f"Consumer-{thread_id} processed: {line}")
        except ValueError:
            print(f"Consumer-{thread_id} encountered malformed line: {line}")
        finally:
            data_queue.task_done()

# Display top congested traffic lights per hour
def display_top_congested():
    print("\nTop Congested Traffic Lights Per Hour:")
    for hour in sorted(traffic_data_by_hour.keys()):
        sorted_lights = sorted(traffic_data_by_hour[hour].items(), key=lambda x: -x[1])[:TOP_N]
        print(f"Hour {hour:02d}:00")
        for light_id, count in sorted_lights:
            print(f"  {light_id}: {count} cars")

# Generate sample data if not present
def create_sample_data(file_path):
    if os.path.exists(file_path):
        return
    with open(file_path, 'w') as f:
        f.write(
            "00:00 TL1 20\n"
            "00:05 TL2 15\n"
            "00:10 TL3 25\n"
            "01:00 TL1 30\n"
            "01:05 TL2 35\n"
            "01:10 TL4 20\n"
            "02:00 TL1 10\n"
            "02:05 TL2 40\n"
            "02:10 TL3 35\n"
        )

# Main function
def main():
    input_file = 'traffic_data.txt'
    create_sample_data(input_file)

    producers = [threading.Thread(target=producer_thread, args=(input_file, i)) for i in range(NUM_PRODUCERS)]
    consumers = [threading.Thread(target=consumer_thread, args=(i,)) for i in range(NUM_CONSUMERS)]

    for p in producers:
        p.start()
    for c in consumers:
        c.start()

    for p in producers:
        p.join()

    data_queue.join()

    for c in consumers:
        c.join()

    display_top_congested()

if __name__ == "__main__":
    main()
